# app.py
import streamlit as st
import joblib
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler

# 1. Charger le mod√®le et le scaler
model = joblib.load('lasso_model.joblib')
scaler = joblib.load('scaler.pkl')

# 2. Cr√©er l'interface utilisateur
st.title('üìä Pr√©diction des Pertes √âconomiques li√©es au Gaspillage Alimentaire')

st.markdown("""
Cette application pr√©dit les pertes √©conomiques (en millions $) bas√©es sur les caract√©ristiques du gaspillage alimentaire.
""")

# 3. Sidebar pour les inputs utilisateur
st.sidebar.header('üì• Param√®tres d\'Entr√©e')

def user_input_features():
    country = st.sidebar.selectbox('Pays', ['France', 'USA', 'China', 'India', 'Brazil', 'Japan'])
    year = st.sidebar.slider('Ann√©e', 2018, 2025, 2022)
    food_category = st.sidebar.selectbox('Cat√©gorie Alimentaire', 
                                       ['Fruits & Vegetables', 'Prepared Food', 'Dairy Products', 'Meat & Seafood'])
    total_waste = st.sidebar.number_input('D√©chets Totaux (Tonnes)', min_value=0.0, value=10000.0)
    avg_waste = st.sidebar.number_input('D√©chet Moyen par Habitant (Kg)', min_value=0.0, value=50.0)
    population = st.sidebar.number_input('Population (Millions)', min_value=0.0, value=50.0)
    household_waste = st.sidebar.slider('D√©chet M√©nager (%)', 0.0, 100.0, 30.0)
    
    data = {
        'Country': country,
        'Year': year,
        'Food Category': food_category,
        'Total Waste (Tons)': total_waste,
        'Avg Waste per Capita (Kg)': avg_waste,
        'Population (Million)': population,
        'Household Waste (%)': household_waste
    }
    
    features = pd.DataFrame(data, index=[0])
    return features

input_df = user_input_features()

# 4. Pr√©traitement des donn√©es
def preprocess_input(input_df):
    # Encodage one-hot
    countries = ['France', 'USA', 'China', 'India', 'Brazil', 'Japan']
    categories = ['Fruits & Vegetables', 'Prepared Food', 'Dairy Products', 'Meat & Seafood']
    
    for country in countries:
        input_df[f'Country_{country}'] = 1 if input_df['Country'].values[0] == country else 0
        
    for category in categories:
        input_df[f'Food Category_{category}'] = 1 if input_df['Food Category'].values[0] == category else 0
    
    # Supprimer les colonnes originales
    input_df.drop(['Country', 'Food Category'], axis=1, inplace=True)
    
    # Scaling
    numerical_features = ['Year', 'Total Waste (Tons)', 'Avg Waste per Capita (Kg)', 
                         'Population (Million)', 'Household Waste (%)']
    
    input_df[numerical_features] = scaler.transform(input_df[numerical_features])
    
    return input_df

processed_df = preprocess_input(input_df.copy())

# 5. Affichage des donn√©es d'entr√©e
st.subheader('üìã Param√®tres Saisis')
st.write(input_df)

# 6. Pr√©diction
if st.button('üîÆ Pr√©dire les Pertes √âconomiques'):
    prediction = model.predict(processed_df)
    st.success(f'**Pr√©diction des pertes √©conomiques :** ${prediction[0]:.2f} millions')
    
    # Explication suppl√©mentaire
    st.markdown("""
    **Interpr√©tation :**
    - Cette pr√©diction est bas√©e sur un mod√®le Random Forest entra√Æn√© sur des donn√©es historiques
    - La pr√©cision moyenne du mod√®le est de ¬± $2.5 millions
    - Les facteurs les plus influents sont g√©n√©ralement les d√©chets totaux et la population
    """)

# 7. Section d'information
st.markdown("---")
st.markdown("""
**üìå Mode d'emploi :**
1. Remplir les param√®tres dans la sidebar ‚Üê
2. Cliquer sur le bouton de pr√©diction
3. Consulter les r√©sultats ci-dessus

*Les donn√©es utilis√©es proviennent du Global Food Wastage Dataset 2018-2024*
""")